# Funktion (kwbtrfs_service_check), Btrfs-Laufwerk überprüfen# {{{
#
# usage: kwbtrfs_service_check
#
kwbtrfs_service_check() {
	unset -- DRIVE DEV REPAIR
	# Variabeln# {{{
	lv_Backup=$(gettext 'Sicherungskopie')
	lv_Qgroup=$(gettext 'Quota Gruppe')
#	lv_Readonly=$(gettext 'nur lesbar')
	lv_Repair=$(gettext 'reparieren')
	lv_Subvolume_Id=$(gettext 'Subvolume ID')
	lv_Verify_Csum=$(gettext 'prüfe Checksumme')
	SERVICE_CHECK_TITLE="${lv_Service}::${lv_Check}"
	REPAIR="${REPAIR:-no}"
	## }}}
	# Funktion (check_menu)# {{{
	check_menu() {
		MENU=(\"$lv_Btrfs_Drive\" \"$DEV\" $lv_Backup \"$BACKUP\"
		\"$lv_Verify_Csum\" \"$VCSUM\" \"$lv_Qgroup\" \"$QGROUP\"
		\"$lv_Subvolume_Id\" \"$SV_ID\" $lv_Superblock \"$SUPER\"
		$lv_Repair \"$REPAIR\" $gv_Save \"\" $gv_Back \"\")
		menubox "$1" "$SERVICE_CHECK_TITLE" "$gv_Menupoint" "$MENU"
	}
	## }}}
	# Funktion (check_subvolume_id), Subvolume ID auswählen# {{{
	#
	# usage: check_subvolume_id
	#
	check_subvolume_id() {
		if [[ -n $DRIVE ]] ; then
			btrfs subvolume list -a "$DRIVE" > ${gv_WorkDir}subvol_id
			if [[ -s ${gv_WorkDir}subvol_id ]] ; then
				while read id nr rest ; do
					ID+=(nr \"${rest##* }\")
				done < ${gv_WorkDir}subvol_id
				SV_ID_MSG=$(gettext 'Wählen Sie bitte eine $lv_Subvolume_Id aus.')
				# Funktion (check_subvolume_id_menu)# {{{
				check_subvolume_id_menu() {
					SV_ID_MENU=($gv_None \"\" $ID $gv_Back \"\")
					menubox "$1" "$SERVICE_CHECK_TITLE" "$SV_ID_MSG" "$SV_ID_MENU"
				}
				## }}}
				check_subvolume_id_menu
				while [[ -n $gv_Auswahl ]] ; do
					case "$gv_Auswahl" in
						HELP*)
							;;
						$gv_None)
							unset -- SV_ID
							break
							;;
						[0-9]*)
							# ID übernehmen
							SV_ID="$gv_Auswah"
							break
							;;
						*)
							break
							;;
					esac
				done
			else
				MSG=$(gettext 'Es sind keine Subvolumes vorhanden.')
				msgbox "$gv_Info" "$MSG"
			fi
		else
			no_btrfs_choice_msg
		fi
	}
	# }}}
	check_menu
	while [[ -n $gv_Auswahl ]] ; do
		case "$gv_Auswahl" in
			HELP*)
				script_help service_check_help
				check_menu "${gv_Auswahl#HELP }"
				;;
			$lv_Btrfs_Drive)
				# Btrfs-Laufwerk auswählen# {{{
				autoload -U kwbtrfs_service_check_btrfs_dev
				kwbtrfs_service_check_btrfs_dev
				## }}}
				check_menu $lv_Btrfs_Drive
				;;
			$lv_Backup)
				# benutze das 1. gültige Backup ($gv_Yes/$gv_No).# {{{
				MSG=$(gettext 'Soll die erste gültige $lv_Backup benutzt werden (${gv_Yes}/${gv_No})?')
				yesno "$SERVICE_CHECK_TITLE" "$MSG" yes
				if [[ $gv_Auswahl == yes ]] ; then
					BACKUP=yes
				else
					BACKUP=no
				fi
				## }}}
				check_menu $lv_Backup
				;;
			$lv_Verify_Csum)
				# überprüfe die Checksumme der Datenblöcke ($gv_Yes/$gv_No).# {{{
				MSG=$(gettext 'Soll die Checksumme der Datenblöcke überprüft werden (${gv_Yes}/${gv_No})?')
				yesno "$SERVICE_CHECK_TITLE" "$MSG" yes
				if [[ $gv_Auswahl == yes ]] ; then
					VCSUM=yes
				else
					VCSUM=no
				fi
				## }}}
				check_menu $lv_Verify_Csum
				;;
			$lv_Qgroup)
				# überprüfe Quota Gruppen Buchhaltung und vergleiche# {{{
				# sie mit der Dateisystem Buchhaltung ($gv_Yes/$gv_No).
				MSG=$(gettext 'Soll die Quota Gruppen Buchhaltung überprüft und mit der Dateisystem Buchhaltung verglichen werden (${gv_Yes}/${gv_No})?')
				yesno "$SERVICE_CHECK_TITLE" "$MSG" yes
				if [[ $gv_Auswahl == yes ]] ; then
					QGROUP=yes
				else
					QGROUP=no
				fi
				## }}}
				check_menu $lv_Qgroup
				;;
			$lv_Subvolume_Id)
				# erweiter die Überprüfung auf Subvolume ID# {{{
				check_subvolume_id
				## }}}
				check_menu $lv_Subvolume_Id
				;;
			$lv_Superblock)
				# benutze Superblock Kopie (0, 1 oder 2)# {{{
				# Funktion (superblock_menu)# {{{
				superblock_menu() {
					MENU=($gv_None \"\" 0 \"\" 1 \"\" 2 \"\" $gv_Back \"\")
					menubox "$1" "$SERVICE_CHECK_TITLE" "$gv_Menupoint" "$MENU"
				}
				## }}}
				superblock_menu
				while [[ -n $gv_Auswahl ]] ; do
					case $gv_Auswahl in
						HELP*)
							script_help service_check_help
							superblock_menu "${gv_Auswahl#HELP }"
							;;
						[0-2])
							# übernehmen
							SUPER="$gv_Auswahl"
							break
							;;
						$gv_None)
							unset -- SUPER
							break
							;;
						$gv_Back|*)
							break
							;;
					esac
				done
				## }}}
				check_menu $lv_Superblock
				;;
			$lv_Repair)
				# Device reparieren ($gv_Yes/$gv_No).# {{{
				MSG=$(gettext 'Soll versucht werden das Dateisystem zu reparieren (${gv_Yes}/${gv_No})?\n\nSie sollten es lieber mit den Menüpunkten Rettung oder Wiederherstellung versuchen.')
				yesno "$SERVICE_CHECK_TITLE" "$MSG" no
				if [[ $gv_Auswahl == yes ]] ; then
					REPAIR=yes
				else
					REPAIR=no
				fi
				## }}}
				check_menu $lv_Repair
				;;
			$gv_Save)
				# Überprüfung starten# {{{
				if [[ -n $DRIVE ]] && [[ -n $DEV ]] ; then
					# Laufwerk ausbinden
					mount_check -a $DRIVE
					if [[ $U_MOUNT == yes ]] ; then
						#CHECK_OPT="--readonly --progress"
						CHECK_OPT="--progress"
						if [[ $REPAIR == yes ]] ; then
							CHECK_OPT="$CHECK_OPT --repair"
						fi
						if [[ $BACKUP == yes ]] ; then
							CHECK_OPT="$CHECK_OPT --backup"
						fi
						if [[ $VCSUM == yes ]] ; then
							CHECK_OPT="$CHECK_OPT --check-data-csum"
						fi
						if [[ $QGROUP == yes ]] ; then
							CHECK_OPT="$CHECK_OPT --qgroup-report"
						fi
						if [[ -n $SV_ID ]] ; then
							CHECK_OPT="$CHECK_OPT --subvol-extents $SV_ID"
						fi
						if [ -n $SUPER ]] ; then
							case $SUPER in
								[0-2]) CHECK_OPT="$CHECK_OPT --super $SUPER"
									;;
							esac
						fi
						# ausführen
						rm -rf ${gv_WorkDir}/btrfs_check &>/dev/null
						echo "$DEV" >>${gv_WorkDir}/btrfs_check
						echo "---------------------------" \
							>> ${gv_WorkDir}/btrfs_check
						btrfs check ${=CHECK_OPT} $DEV 2>&1 \
							>> ${gv_WorkDir}/btrfs_check
						view_file ${gv_WorkDir}/btrfs_check
						# Variabeln mit Laufwerken löschen
						unset -- DRIVE DEV
					else
						# Variabeln mit Laufwerken löschen
						unset -- DRIVE DEV
					fi
				else
					no_btrfs_choice_msg
				fi
				## }}}
				check_menu "$lv_Btrfs_Drive"
				;;
			$gv_Back|*)
				# zurück/abbrechen
				break
				;;
		esac
	done
	return 0
}
## }}}
### Modeline {{{
### vim:ft=zsh:foldmethod=marker
### vim:set ts=4: 
### }}}
