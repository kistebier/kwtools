#!/bin/zsh
#
# Autor: Kai Wilke <kiste@netzworkk.de> 05.02.2018
#
# Script: kwbtrfs, bearbeitet Btrfs-Dateisysteme.
# Version: 0.0.6
#
# Ausführen von Befehlen auf bestimmte Signale.
# Notiz. Immer den Namen verwenden, da es auf einigen OS
# eine andere Numerierung geben kann.
#
trap 'setterm --inversescreen off ; setterm --reset ;
umount_dev ; rm -rf $gv_Script_Lock $gv_WorkDir &>/dev/null' EXIT INT

gv_ScriptName=${0##*/}

# Verzeichniss in denen nach Funktionen gesucht wird
#
if [ -f /usr/local/share/kwtools/functions/sys/script_init ] ; then
	PREFIX=/usr/local
else
	PREFIX=/usr
fi
Script_init_Fpath="${PREFIX}/share/kwtools/functions/sys"
export TEXTDOMAINDIR="${PREFIX}/share/locale"
export TEXTDOMAIN="$gv_ScriptName"

if [ -z ${(M)${FPATH}##*${Script_init_Fpath}*} ] ; then
	FPATH=${Script_init_Fpath}:${FPATH}
fi

# script_init enthält die globalen Scripteinstellungen und lädt
# diese automatisch.
#
autoload -U script_init

# Scriptinitialisierung
script_init

# Kernel Version prüfen
kernel_release
if ! compare_versions "$gv_K_Release"  "4.6.0" ; then
	MSG=$(gettext 'Sie benötigen eine Kernel Version >=4.6.0.')
	msgbox "$gv_Info" "$MSG"
	exit 0
fi

# Prüfen, ob btrfs installiert ist.
prog_check btrfs mkfs.btrfs
if [[ -n $NO_PROGS ]] ; then
	exit 0
fi

# Prüfen, ob die Version von btrfs die richtige ist.
Version=${${(M)$(btrfs --version)##*v*}#v}
if ! compare_versions "$Version" "4.5.2"  ; then
	MSG=$(gettext 'Sie benötigen eine btrfs ($Version) Version >=4.5.2.')
	msgbox "$gv_Info" "$MSG"
	exit 0
fi

# Prüfen, ob man der Benutzer root ist.
root_check

# Nachdem das Script initialisiert wurde, kann man die anderen
# benötigten Funktionen laden. Die Funktion sys_conf wird bereits
# von der Funktion script_init ausgeführt.
# autoload -U ...

# Variablen# {{{
lv_All_Devices=$(gettext 'alle Laufwerke')
lv_Btrfs_Drive=$(gettext 'Btrfs-Laufwerk')
lv_Balance=$(gettext 'Gleichgewicht')
lv_Defrag=$(gettext 'Defragmentierung')
lv_Detail=$(gettext 'detaillierte Information')
lv_Devices=$(gettext 'Laufwerke')
lv_Drive=$(gettext 'Laufwerk')
lv_Dup=$(gettext 'dup')
lv_Filesystem=$(gettext 'Dateisystem')
lv_Meta=$(gettext 'Metadaten')
lv_Redundanz=$(gettext 'Redundanzdaten')
lv_Scan=$(gettext 'scannen')
lv_Service=$(gettext 'Wartung')
lv_Single=$(gettext 'single')
lv_Subvolumes=$(gettext 'Subvolumes')
lv_Superblock=$(gettext 'Superblock')
BTRFS_MSG=$(gettext 'Wählen Sie ein $lv_Btrfs_Drive aus.')
CONF="/etc/kwtools/kwbtrfs.cf"
DRIVE_MSG=$(gettext 'Wählen Sie ein $lv_Drive aus.')
SEVERAL_DRIVE_MSG=$(gettext 'Wählen Sie ein oder mehrere $lv_Devices aus.')
## }}}

# Wenn es eine KONFIGURATIONSRC Datei gibt einlesen.
read_file -f $CONF

# Funktion main_menu# {{{
#
main_menu() {
    MAIN_MENU=($gv_Configuration \"\" $lv_Filesystem \"\" $lv_Subvolumes \"\"
		$lv_Devices \"\" $lv_Balance \"\" $lv_Service \"\" $gv_Exit \"\")
	menubox "$1" "$gv_Configuration" "$gv_Menupoint" "$MAIN_MENU"
}
## }}}
# Funktion (btrfs_choice_menu), btrfs Laufwerk auswählen# {{{
btrfs_choice_menu() {
	if [[ ${#argv} == 3 ]] ; then
		BTRFS_MENU=($3 $gv_Back \"\")
		menubox "$1" "$2" "$BTRFS_MSG" "$BTRFS_MENU"
	else
		no_part_msg $0
		return 1
	fi
	return 0
}
## }}}
# Funktion (btrfs_dev_checklist), btrfs Laufwerke zur Auswahl anzeigen# {{{
#
btrfs_dev_checklist() {
	if [[ ${#argv} -ge 1 ]] ; then
		TITLE="$1"
		MENU=($BTRFS_PATH_M)
		MSG=$(gettext 'Wählen Sie ein oder mehrere btrfs Laufwerke aus.')
		checklist "$2" "$TITLE" "$MSG" "$MENU"
	else
		no_para_msg $0
	fi
}
## }}}
# Funktion (drive_choice_menu), Laufwerke zur Auswahl anzeigen# {{{
#
drive_choice_menu() {
	if [[ ${#argv} == 3 ]] ; then
		MENU=($3 $gv_Back \"\")
		menubox "$1" "$2" "$DRIVE_MSG" "$MENU"
	else
		no_part_msg $0
		return 1
	fi
	return 0
}
## }}}
# Funktion (drive_choice_checklist), mehrere Laufwerke zur Auswahl anzeigen# {{{
#
drive_choice_checklist() {
	if [[ ${#argv} == 3 ]] ; then
		MENU=($3)
		checklist "$1" "$2" "$SEVERAL_DRIVE_MSG" "$MENU"
	else
		no_part_msg $0
		return 1
	fi
	return 0
}
## }}}
# Funktion (mount_btrfs_dev_check), falls die btrfs Devices nicht eingebunden sind# {{{
# wird es jetzt getan.
#
# usage: mount_btrfs_dev_check
#
mount_btrfs_dev_check() {
	unset -- BTRFS_PATH BTRFS_PATH_E BTRFS_PATH_M
	for i in ${=BTRFS_DEV} ; {
		if [[ ${#BTRFS_MD[*]} -gt 0 ]] ; then
			# Index wird für die Variable Uuid benötigt.
			Index=$BTRFS_DEV[(i)$i]
			if [[ -z ${(M)${=BTRFS_MD[Index]}[(fr)*$i*]} ]] ; then
				mount_check -c $i
				if [[ $MOUNT == no ]] ; then
					mkdir /tmp/${i##*/} &>/dev/null
					if mount -t btrfs $i /tmp/${i##*/} &>/dev/null ; then
						MOUNT_DEVS+=(/tmp/${i##*/})
						BTRFS_PATH+=(/tmp/${i##*/})
						BTRFS_PATH_E+=(/tmp/${i##*/} \"\")
						BTRFS_PATH_M+=(/tmp/${i##*/} \"\" off)
					fi
				else
					BTRFS_PATH+=($MOUNTPOINT)
					BTRFS_PATH_E+=($MOUNTPOINT \"\")
					BTRFS_PATH_M+=($MOUNTPOINT \"\" off)
				fi
			else
				mount_check -c $i
				if [[ $MOUNT == no ]] ; then
					Uuid="${BTRFS_UUID_DEV[Index]}"
					mkdir /tmp/${Uuid##*-} &>/dev/null
					if mount -t btrfs UUID="$Uuid" /tmp/${Uuid##*-} &>/dev/null ; then
						MOUNT_DEVS+=(/tmp/${Uuid##*-})
						BTRFS_PATH+=(/tmp/${Uuid##*-})
						BTRFS_PATH_E+=(/tmp/${Uuid##*-} \"\")
						BTRFS_PATH_M+=(/tmp/${Uuid##*-} \"\" off)
					fi
				else
					BTRFS_PATH+=($MOUNTPOINT)
					BTRFS_PATH_E+=($MOUNTPOINT \"\")
					BTRFS_PATH_M+=($MOUNTPOINT \"\" off)
				fi
			fi
		else
			mount_check -c $i
			if [[ $MOUNT == no ]] ; then
				mkdir /tmp/${i##*/} &>/dev/null
				if mount -t btrfs $i /tmp/${i##*/} &>/dev/null ; then
					MOUNT_DEVS+=(/tmp/${i##*/})
					BTRFS_PATH+=(/tmp/${i##*/})
					BTRFS_PATH_E+=(/tmp/${i##*/} \"\")
					BTRFS_PATH_M+=(/tmp/${i##*/} \"\" off)
				fi
			else
				BTRFS_PATH+=($MOUNTPOINT)
				BTRFS_PATH_E+=($MOUNTPOINT \"\")
				BTRFS_PATH_M+=($MOUNTPOINT \"\" off)
			fi
		fi
	}
}
## }}}
# Funktion (no_btrfs_dev_msg), Nachricht das keine Laufwerke mit BTRFS vorhanden sind# {{{
#
no_btrfs_dev_msg() {
	MSG=$(gettext 'Es sind keine Laufwerke mit Btrfs-Dateisystem vorhanden.')
	msgbox "$gv_Info" "$MSG"
}
## }}}
# Funktion (no_free_dev_msg), Nachricht das keine freien Laufwerke vorhanden sind# {{{
#
no_free_dev_msg() {
	MSG=$(gettext 'Es sind keine freien Laufwerke vorhanden.')
	msgbox "$gv_Info" "$MSG"
}
## }}}
# Funktion (no_btrfs_md_dev_msg), Nachricht das keine BTRFS Laufwerke,# {{{
# welche aus mehreren Laufwerken bestehen, vorhanden sind.
#
no_btrfs_md_dev_msg() {
	MSG=$(gettext 'Es sind keine btrfs Laufwerke, welche aus mehreren Laufwerken (z.B. RAID) bestehen, vorhanden.')
	msgbox "$gv_Info" "$MSG"
}
## }}}
# Funktion (no_btrfs_choice_msg), Nachricht das man erst ein $lv_Btrfs_Drive auswählen muss# {{{
#
# usage no_btrfs_choice_msg
#
no_btrfs_choice_msg() {
	MSG=$(gettext 'Sie müssen mindestens ein $lv_Btrfs_Drive auswählen.')
	msgbox "$gv_Info" "$MSG"
}
## }}}
# Funktion (umount_dev), bindet alle Laufwerke aus die ins tmp-Verzeichnis# {{{
# eingebunden wurden und löscht die Mountpoints.
#
umount_dev() {
	if [[ -n ${MOUNT_DEVS[1]} ]] || [[ -n ${SUBVOL_MOUNT_DEVS[1]} ]] ; then
		for i in ${=SUBVOL_MOUNT_DEVS}/*(N/) ; {
			mount_check -a $i
		}
		for i in ${=SUBVOL_MOUNT_DEVS} ${=MOUNT_DEVS} ; {
			mount_check -a $i
		}
		for i in ${=MOUNT_DEVS} ; {
			rmdir $i &>/dev/null
		}
	fi
}
## }}}

##################################################################
#
# Hauptprogramm
#
##################################################################
#
hw_conf
fs_conf

# nach Festplatten suchen
disk
if [[ -z ${DISK_DEV[1]} ]] ; then
    no_disks_msg
    exit 0
fi

# nach Linux Partitionen auf allen Festplatten suchen
partdb
if [[ -z ${PART[1]} ]] ; then
	no_part_msg
    exit 0
fi

# Logische Volumes erkennen
if [[ -x ${commands[lvm]} ]] ; then
	lvm_version
	lv
fi

# RAID Arrays erkennen
if [[ -x ${commands[mdadm]} ]] ; then
	raid
	# RAID Arrays herausfiltern die in Logischen Volumes
	# vorkommen
	raid_filter -l
fi

# cryptsetup Laufwerke erkennen
if [[ -x ${commands[cryptsetup]} ]] ; then
	search_cryptdev -a
	if [[ -n ${MAP_DEV_E[1]} ]] ; then
		unset -- CRYPT_DEV
		for i in ${=MAP_DEV_E} ; {
			CRYPT_DEV+=(/dev/mapper/${i})
		}
	fi
fi

main_menu
while [ "$gv_Auswahl" ] ; do
	case $gv_Auswahl in
		HELP*)
    	    # Hilfe Messagebox
			script_help help
			main_menu "${gv_Auswahl#HELP }"
			;;
		$gv_Configuration)
			# Konfiguration# {{{
			autoload -U kwbtrfs_conf
			kwbtrfs_conf
			## }}}
			main_menu $gv_Configuration
			;;
		$lv_Filesystem)
			# Dateisystem # {{{
			lv_Df=$(gettext 'Blockbelegung')
			lv_Label=$(gettext 'Label')
			lv_Size=$(gettext 'Grösse')
			lv_Sync=$(gettext 'Synchronisation')
			# Funktion (filesystem_menu)# {{{
			#
			filesystem_menu() {
				MENU=($gv_Display \"\" \"$lv_Detail\" \"\" $lv_Df \"\" $lv_Defrag \"\"
				$lv_Label \"\" $gv_Enlarge \"\" $gv_Reduce \"\"
				$lv_Sync \"\" $gv_Back \"\")
				menubox "$1" "$lv_Filesystem" "$gv_Menupoint" "$MENU"
			}
			## }}}
			search_btrfs_filesystem
			if [[ -n ${BTRFS_DEV[1]} ]] ; then
				filesystem_menu
				while [[ -n $gv_Auswahl ]] ; do
					case $gv_Auswahl in
						HELP*)
							# Hilfe
							script_help filesystem_help
							filesystem_menu "${gv_Auswahl#HELP }"
							;;
						$gv_Display)
							# Ansicht über die btrfs Laufwerke# {{{
							autoload -U kwbtrfs_filesystem_show
							kwbtrfs_filesystem_show
							## }}}
							filesystem_menu $gv_Display
							;;
						$lv_Detail)
							# detailierte Ansicht über die btrfs Laufwerke# {{{
							autoload -U kwbtrfs_filesystem_usage
							kwbtrfs_filesystem_usage
							## }}}
							filesystem_menu $gv_Detail
							;;
						$lv_Df)
							# Ansicht über die belegten Blöcke von btrfs Laufwerken# {{{
							autoload -U kwbtrfs_filesystem_df
							kwbtrfs_filesystem_df
							## }}}
							filesystem_menu $lv_Df
							;;
						$lv_Defrag)
							# Defragmentierung eines btrfs Laufwerks# {{{
							autoload -U kwbtrfs_filesystem_defrag
							kwbtrfs_filesystem_defrag
							## }}}
							filesystem_menu $lv_Defrag
							;;
						$lv_Label)
							# Label ändern, einfügen# {{{
							autoload -U kwbtrfs_filesystem_label
							kwbtrfs_filesystem_label
							## }}}
							filesystem_menu $lv_Label
							;;
						$gv_Enlarge)
							# Dateisystem vergrössern# {{{
							autoload -U kwbtrfs_filesystem_enlarge
							kwbtrfs_filesystem_enlarge
							## }}}
							filesystem_menu $gv_Enlarge
							;;
						$gv_Reduce)
							# Dateisystem verkleinern# {{{
							autoload -U kwbtrfs_filesystem_reduce
							kwbtrfs_filesystem_reduce
							## }}}
							filesystem_menu $gv_Reduce
							;;
						$lv_Sync)
							# Dateisystem synchronisieren# {{{
							autoload -U kwbtrfs_filesystem_sync
							kwbtrfs_filesystem_sync
							## }}}
							filesystem_menu $lv_Sync
							;;
						$gv_Back|*)
							# zurück
							break
							;;
					esac
				done
			else
				no_btrfs_dev_msg
			fi
			## }}}
			main_menu $lv_Filesystem
			;;
		$lv_Subvolumes)
			# Subvolumes# {{{
			# Variablen# {{{
			lv_Subvolume=$(gettext 'Subvolume')
			lv_Snapshot=$(gettext 'Snapshot')
			lv_Findnew=$(gettext 'Zustand Dateien')
			lv_DefaultId=$(gettext 'Subvolume IDs')
			## }}}
			# Funktion (get_mountpoint_subvol){{{
			#
			# usage: get_mountpoint_subvol DRIVE
			get_mountpoint_subvol () {
				if [[ ${#argv} == 1 ]] ; then
					Drive="$1"
					Mp_Sv="`print ${${(s: :)${(M)${(f)"$(mount)"}##*subvol=/${Drive##*/}\)}}[3]}`"
				else
					no_para_msg $0
				fi
			}
			#}}}
			# Funktion (subvolumes_menu)# {{{
			#
			subvolumes_menu() {
				MENU=($gv_Display \"\" $gv_Create \"\" $gv_Delete \"\"
				$lv_Snapshot \"\" \"$lv_Findnew\" \"\" \"$lv_DefaultId\" \"\"
				$gv_Back \"\")
				menubox "$1" "$lv_Subvolumes" "$gv_Menupoint" "$MENU"
			}
			## }}}
			# Funktion (no_subvolume_msg), Nachricht das keine Subvolumes vorhanden sind# {{{
			#
			no_subvolume_msg() {
				MSG=$(gettext 'Es sind keine $lv_Subvolumes vorhanden.')
				msgbox "$gv_Info" "$MSG"
			}
			## }}}
			# Funktion (search_subvolumes), suche nach Subvolumes# {{{
			#
			search_subvolumes() {
				if [[ ${#argv} -ge 1 ]] ; then
					unset -- SUBVOL_DEV SUBVOL_DEV_E SUBVOL_DEV_M SUBVOL_MOUNT_DEVS
					local Dev
					Dev="$1"
					for d in ${=Dev} ; {
						btrfs subvolume list -tu $d | tail -n +3 | \
						while read id  gen tl uuid s ; do
							if [[ -n $s ]] ; then
								# suche nach subvol=/subvolumename
								Tmp="`print ${${(s: :)${(M)${(f)"$(mount)"}##*subvol=/${s}*\)}}[3]}`"
								
								if [[ ! -n $Tmp ]] ; then
									MOUNT_DEV=(${gv_WorkDir}/${d##*/})
									if [[ ! -d ${MOUNT_DEV%/}/${s} ]] ; then
										mkdir ${MOUNT_DEV%/}/${s} &>/dev/null
									fi
									if mount -t btrfs -o subvol=${s},rw $d ${MOUNT_DEV%/}/${s} &>/dev/null ; then
										SUBVOL_MOUNT_DEVS+=(${MOUNT_DEV%/}/${s})
										SUBVOL_DEV+=(${MOUNT_DEV%/}/${s})
										SUBVOL_DEV_E+=(${MOUNT_DEV%/}/${s} \"\")
										SUBVOL_DEV_M+=(${MOUNT_DEV%/}/${s} \"\" off)
									fi
								else
									MOUNT_DEV=($d)
									SUBVOL_DEV+=(${MOUNT_DEV%/}/${s})
									SUBVOL_DEV_E+=(${MOUNT_DEV%/}/${s} \"\")
									SUBVOL_DEV_M+=(${MOUNT_DEV%/}/${s} \"\" off)
								fi
							else
								no_subvolume_msg
							fi
						done
					}
				else
					no_part_msg $0
				fi
			}
			## }}}
			# Funktion (subvol_checklist), Subvolumes zur Auswahl anzeigen# {{{
			#
			subvol_checklist() {
				MENU=($SUBVOL_DEV_M)
				MSG=$(gettext 'Wählen Sie ein oder mehrere btrfs $lv_Subvolumes aus.')
				checklist "$1" "$lv_Subvolumes" "$MSG" "$MENU"
			}
			## }}}
			# Funktion (subvol_snapshot_choice_menu), Subvolumes zur Auswahl anzeigen# {{{
			#
			subvol_snapshot_choice_menu() {
				MENU=($SUBVOL_DEV_E $gv_Back \"\")
				MSG=$(gettext 'Wählen Sie ein btrfs $lv_Subvolume aus.')
				menubox "$1" "${lv_Subvolumes}::${lv_Snapshot}::${lv_Subvolume}" "$MSG" "$MENU"
			}
			## }}}
			#
			search_btrfs_filesystem
			if [[ -n ${BTRFS_DEV[1]} ]] ; then
				subvolumes_menu
				while [ -n "$gv_Auswahl" ] ; do
					case $gv_Auswahl in
						HELP*)
							# Hilfe
							script_help subvolumes_help
							subvolumes_menu "${gv_Auswahl#HELP }"
							;;
						$gv_Display)
							# Anzeige der vorhandenen Subvolumes# {{{
							autoload -U kwbtrfs_subvolumes_display
							kwbtrfs_subvolumes_display
							## }}}
							subvolumes_menu "$gv_Display"
							;;
						$gv_Create)
							# Subvolume erstellen# {{{
							autoload -U kwbtrfs_subvolumes_create
							kwbtrfs_subvolumes_create
							## }}}
							subvolumes_menu "$gv_Create"
							;;
						$gv_Delete)
							# Subvolumes löschen# {{{
							autoload -U kwbtrfs_subvolumes_delete
							kwbtrfs_subvolumes_delete
							## }}}
							subvolumes_menu "$gv_Delete"
							;;
						$lv_Snapshot)
							# Snapshot eines Subvolume erstellen.# {{{
							autoload -U kwbtrfs_subvolumes_snapshot
							kwbtrfs_subvolumes_snapshot
							## }}}
							subvolumes_menu "$lv_Snapshot"
							;;
						$lv_Findnew)
							# Anzeige vom Zustand der Dateien# {{{
							autoload -U kwbtrfs_subvolumes_findnew
							kwbtrfs_subvolumes_findnew
							## }}}
							subvolumes_menu "$lv_Findnew"
							;;
						$lv_DefaultId)
							# Ids für die Subvolumes setzen.# {{{
							autoload -U kwbtrfs_subvolumes_id
							kwbtrfs_subvolumes_id
							## }}}
							subvolumes_menu "$lv_DefaultId"
							;;
						$gv_Back)
							# zurück
							break
							;;
					esac
				done
			else
				no_btrfs_dev_msg
			fi
			## }}}
			main_menu $lv_Subvolumes
			;;
		$lv_Devices)
			# Management für (multiple) Devices, wie z.B. RAID# {{{
			# Variablen# {{{
			lv_Options=$(gettext 'Optionen')
			lv_Raid=$(gettext 'RAID')
			lv_Is_Drive="$lv_Btrfs_Drive"
			lv_Encrypt_Raid=$(gettext 'verschlüsseltes RAID')
			lv_Device_Convert=$(gettext 'Laufwerk konvertieren')
			lv_Device_Add=$(gettext 'Laufwerke hinzufügen')
			lv_Device_Remove=$(gettext 'Laufwerke entfernen')
			lv_Device_Replace=$(gettext 'Laufwerk tauschen')
			lv_Src_Device=$(gettext 'Quell-Laufwerk')
			lv_Target_Device=$(gettext 'Ziel-Laufwerk')
			## }}}
			# Funktion (device_menu)# {{{
			device_menu() {
				MENU=($gv_Display \"\" $gv_Create \"\" \"$lv_Device_Convert\" \"\"
				\"$lv_Device_Add\" \"\" \"$lv_Device_Remove\" \"\"
				\"$lv_Device_Replace\" \"\" $gv_Back \"\")
				menubox "$1" "$lv_Devices" "$gv_Menupoint" "$MENU"
			}
			## }}}
			# Funktion (create_menu)# {{{
			#
			create_menu() {
				MENU=($lv_Drive \"\" $lv_Raid \"\" \"$lv_Encrypt_Raid\" \"\"
					$gv_Back \"\")
				menubox "$1" "$lv_Devices" "$gv_Menupoint" "$MENU"
			}
			## }}}
			device_menu
			while [ -n "$gv_Auswahl" ] ; do
				case $gv_Auswahl in
					HELP*)
						# Hilfe
						script_help devices_help
						device_menu "${gv_Auswahl#HELP }"
						;;
					$gv_Display)
						# Detaillierte Informationen über btrfs Laufwerke,#{{{
						# anzeigen
						search_btrfs_filesystem
						if [[ -n ${BTRFS_DEV[1]} ]] ; then
							mount_btrfs_dev_check
							btrfs_dev_checklist "${lv_Devices}::${gv_Display}"
							while [[ $gv_Auswahl_Display ]] ; do
								case $gv_Auswahl in
									HELP*)
										# Hilfe
										script_help devices_usage_help
										btrfs_dev_checklist "${lv_Devices}::${gv_Display}" "${gv_Auswahl#HELP }"
										;;
									/*)
										# Information über die ausgewählten Laufwerke# {{{
										# anzeigen
										rm -rf ${gv_WorkDir}/btrfs_usage &>/dev/null
										for i in ${=gv_Auswahl} ; {
											echo "$i" >>${gv_WorkDir}/btrfs_usage
											echo "--------------------------------" >>${gv_WorkDir}/btrfs_usage
											btrfs device usage -h "$i" >>${gv_WorkDir}/btrfs_usage
											echo "" >>${gv_WorkDir}/btrfs_usage
										}
										view_file ${gv_WorkDir}/btrfs_usage
										## }}}
										btrfs_dev_checklist "${lv_Devices}::${gv_Display}" "${gv_Auswahl[1]}"
										;;
									*)
										# zurück
										break
										;;
								esac
							done
						else
							no_btrfs_dev_msg
						fi
						## }}}
						device_menu "$gv_Display"
						;;
					$gv_Create)
						# btrfs Laufwerke, RAID Arrays erstellen# {{{
						create_menu
						while [ -n "$gv_Auswahl" ] ; do
							case $gv_Auswahl in
								HELP*)
									script_help device_create_help
									create_menu "${gv_Auswahl#HELP }"
									;;
								$lv_Drive)
									# Laufwerke mit BTRFS formatieren# {{{
									autoload -U kwbtrfs_drive_format
									kwbtrfs_drive_format
									## }}}
									create_menu $lv_Drive
									;;
								$lv_Raid)
									# RAID erstellen# {{{
									autoload -U kwbtrfs_raid_create_conf
									kwbtrfs_raid_create_conf
									## }}}
									create_menu $lv_Raid
									;;
								$lv_Encrypt_Raid)
									# verschlüsseltes RAID erstellen# {{{
									autoload -U kwbtrfs_raid_create_conf
									kwbtrfs_raid_create_conf -c
									## }}}
									create_menu $lv_Encrypt_Raid
									;;
								$gv_Back)
									# zurücck
									break
									;;
							esac
						done
						## }}}
						device_menu "$gv_Create"
						;;
					$lv_Device_Convert)
						# ext[234] Laufwerk nach btrfs konvertieren# {{{
						autoload -U kwbtrfs_drive_convert
						kwbtrfs_drive_convert
						## }}}
						device_menu "$lv_Device_Convert"
						;;
					$lv_Device_Add)
						# Laufwerk hinzufügen# {{{
						autoload -U kwbtrfs_device_add
						kwbtrfs_device_add
						## }}}
						device_menu "$lv_Device_Add"
						;;
					$lv_Device_Remove)
						# Festplatte/Partition entfernen# {{{
						autoload -U kwbtrfs_device_remove
						kwbtrfs_device_remove
						## }}}
						device_menu "$lv_Device_Remove"
						;;
					$lv_Device_Replace)
						# Festplatte/Partition austauschen# {{{
						autoload -U kwbtrfs_device_replace
						kwbtrfs_device_replace
						## }}}
						device_menu "$lv_Device_Replace"
						;;
					$gv_Back)
						# zurück
						break
						;;
				esac
			done
			## }}}
			main_menu $lv_Devices
			;;
		$lv_Balance)
			# Balance# {{{
			 autoload -U kwbtrfs_balance
			 kwbtrfs_balance
			## }}}
			main_menu $lv_Balance
			;;
		$lv_Service)
			# Wartung der btrfs Laufwerke# {{{
			autoload -U kwbtrfs_service
			kwbtrfs_service
			## }}}
			main_menu $lv_Service
			;;
		$gv_Exit)	break
			;;
	esac
done	
#
umount_dev
exit 0

### Modeline {{{
### vim:ft=zsh:foldmethod=marker
### vim:set ts=4: 
### }}}
