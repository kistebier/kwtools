# restrictions_help für kwpostfix{{{
TITLE="${gv_Configuration}::${lv_Restrictions}::${gv_Help}"
MSG=$(gettext 'check_ccert_access typ:mapname: Prüfe, ob vom remote Client der
\tFingerprint des Zertrifikates oder des öffentlichen Schlüssel
\tin einer access Tabelle mit einem OK oder REJECT belegt ist.

check_{client,helo,recipient,sender}_access typ:mapname:
\tPrüfen, ob die Absender-, Empfänger-, Hostname- bzw. die
\tHELO-Name Angabe in einer access Tabelle mit einem OK oder REJECT
\tbelegt ist. Über eine access Tabelle lassen sich gezielt einzelne
\tMailadressen oder Rechner mit einem White- oder Blacklisting
\tbelegen.

check_{client,helo,recipient,sender}_mx_access typ:mapname:
\tPrüfen, ob die MX-Records der jeweiligen Domain in der genannten
\taccess-table mit einem REJECT oder DUNNO belegt sind; ein OK ist
\taus Sicherheitsgründen nicht erlaubt.

check_{client,helo,recipient,sender}_ns_access typ:mapname:
\tPrüfen, ob die Nameserver der jeweiligen Domain in der genannten
\taccess-table mit einem REJECT oder DUNNO belegt sind; ein OK ist
\taus Sicherheitsgründen nicht erlaubt.

check_policy_service: Abfrage eines policy Servers.

check_reverse_client_hostname_access typ:mapname:
\tPrüfen, ob die Hostnamen, Elterndomain, IP-Adressen oder
\tNetzwerke der Clients in einer access Tabelle mit einem OK oder
\tREJECT oder DUNNO belegt sind; ein OK ist aus Sicherheitsgründen
\tnicht erlaubt.

check_reverse_client_hostname_mx_access typ:mapname:
\tPrüfen, ob die MX-Records der jeweiligen Domain in der genannten
\taccess Tabelle mit einem REJECT oder DUNNO belegt sind; ein OK ist
\taus Sicherheitsgründen nicht erlaubt.

check_reverse_client_hostname_ns_access typ:mapname:
\tPrüfen, ob die Nameserver der jeweiligen Domain in der genannten
\taccess Tabelle mit einem REJECT oder DUNNO belegt sind; ein OK ist
\taus Sicherheitsgründen nicht erlaubt.

defer: Liefert generell ein DEFER und beendet die Prüfung. Der
\tClient erhält aber nur einen temporären Fehler 4xx.

defer_if_permit: Sollten eine der nachfolgenden Prüfungen das
\tErgebnis PERMIT bringen, wird die Mail dennoch mit einem DEFER
\tabgewiesen, also einem temporären Fehler 4xx.

NOTIZ: Kann man nur manuell vor eine Restriction stellen. Dient
\tzum testen.

defer_if_reject: Sollten eine der nachfolgenden Prüfungen das
\tErgebnis REJECT bringen, wird die Mail dennoch mit einem DEFER
\tabgewiesen, also einem temporären Fehler 4xx statt des
\teigentlichen 5xx.

NOTIZ: Kann man nur manuell vor eine Restriction stellen. Dient
\tzum testen.

defer_unauth_destination: Liefert ein DEFER, solange nicht
\tdie Zieladresse in "$relay_domins" vorkommt oder Postfix
\tFinal Destination für diese Domain ist, also die Domain in
\t"$mydestination", "$inet_interfaces", "$proxy_interfaces",
\t"$virtual_alias_domains" oder "$virtual_mailbox_domains"
\tvorkommt. Es wird ein temporärer Fehler 4xx gesendet.

permit: Liefert generell ein Ok und beendet die Prüfung.

permit_auth_destination: liefert ein OK, wenn die Zieladresse in
\t"$relay_domins" vorkommt oder Postfix Final Destination für
\tdiese Domain ist, also die Domain in "$mydestination",
\t"$inet_interfaces", "$proxy_interfaces", "$virtual_alias_domains"
\toder "$virtual_mailbox_domains" vorkommt.

\tNOTIZ: Der Hostname wird hier ignoriert!

permit_dnswl_client dnswl_domain=d.d.d.d: Akzeptiert die Mail, wenn
\tder Rechnername des Clients in der dahinter genannten "dnswl_domain"
\t(DNS Sided Whitelisted, DNSWL) gelistet ist. Ist zusätzlich
\tauch noch eine IP-Adresse genannt, wird der Client nur akzeptiert,
\twenn der Client Eintrag in der WL auf den A-Record d.d.d.d
\tverweist.

permit_inet_interfaces: Akzeptiert Mails, wenn die Client IP von
\t"$inet_interfaces" stammt.

permit_mx_backup: Die Mail wird akzeptiert, wenn ein MX-Record der
\tEmpfängerdomain auf unseren Mailserver zeigt und Postfix damit
\tein nachrangiges Backup-Relay sein soll (MX 20). Es hat dann die
\tAufgabe, die Mails an eigentlichen Ziel-Mailserver zuzustellen.
\tIm Normalfall würde Postfix die Annahme dieser Mails verweigern,
\twenn der Ziel-Mailserver ausserhalb unsereres IP Netzes liegt und
\tPostfix damit ein Open Relay wäre.

permit_mynetworks: Mail wird akzeptiert, wenn der Client innerhalb des
\teigenen Netzes liegt, das über die Variable $mynetworks
\tdefiniert ist. Dieser Parameter ist sehr wichtig, ihm kommt
\teine entscheidende Rolle zu: Im Normalfall nehmen wir ja nur
\tMails an, für die wir das Ziel sind ($mydestination) ein
\tMX-Relay sind (permit_mx_backup) oder ein definiertes Relay sind
\t($relay_domins).
\tÜber "permit_mynetworks" aber nehmen wir von den freige-
\tschalteten IP-Nummern Mails auch dann an, wenn der Empfänger
\tausserhalb unseres eigenen Netzes liegt. Üblicherweise wollen
\twir dies eigentlich nicht, denn anderfalls wären wir ein
\tOpen-Relay. Für unser lokales Netz aber stellt ja gerade
\tdieser Server den zuständigen Mailserver für ausgehende
\tMails dar, bei dem die Clients einliefern sollen. Hosts aus
\tdem lokalen Netz es eben gerade doch erlaubt sein, Mails an
\texterne Mailadressen einzuliefern. Und diese Ausnahmeregelung
\twird über "permit_mynetworks" erlaubt.

permit_rhswl_client rhswl_domain=d.d.d.d: Akzeptiert die Mail, wenn
\tder Rechnername des Clients in der dahinter genannten "rhswl_domain"
\t(Right-Hand Sided Whitelisted, RHSWL) gelistet ist. Ist zusätzlich
\tauch noch eine IP-Adresse genannt, wird der Client nur akzeptiert,
\twenn der Client Eintrag in der WL auf den A-Record d.d.d.d
\tverweist.

permit_sasl_authenticated: Akzeptiert Mail, wenn sich der Client
\terfolgraich mit SMTP-AUTH authentifiziert hat. Zum Beispiel, wenn
\tder Client aus einem fremden DUL-Bereich (Dialup User List) kommt.
\tWird bei dynamischen IPs benutzt (Internet Service Provider).

permit_tls_clientcerts: Erlaubt Mails, wenn der Fingerprint des
\tSSL/TLS Client Zertrifikates in "$relay_clientcerts" gelistet ist.

permit_tls_all_clientcerts: Erlaubt Mails, wenn das SSL/TLS Client
\tZertrifikat erfolgreich verifiziert wurde, das heisst von einer
\tbekannten CA (Certification Authority) unterschrieben wurde.
\tDieser Parameter ist gefährlich - er erlaubt Mailrelaying für
\talle Clients, die ein beliebiges Zertrifikat vorweisen können,
\tsolange dies nur irgendwie gültig ist!

reject: Liefert generell ein REJECT und beendet die Prüfung. Der
\tClient erhält einen fatalen Fehler 5xx.

reject_authenticated_sender_login_mismatch: Erzwingt die
\tRestriction "reject_sender_login_mismatch" um nur Clients zu
\tauthentifizieren.

reject_invalid_helo_hostname: Liefert ein REJECT, wenn nach dem
\tHELO/EHLO-Kommando ein Hostname in einer ungültigen Syntax
\tangegebenen wird (Umlaute, Sonderzeichen, Leerzeichen).

reject_multi_recipient_bounce: Liefert ein REJECT, wenn die Mail
\tein Bounce ist, aber mehrere Empfängeradressen besitzt.
\tAllerdings könnte es sich dabei auch um einen Spezialfall einer
\tMail mit der DNS-Anweisung "NOTIFY=NEVER" handeln. Da dieser
\tParameter wissen muss, wie viele Empfänger die Mail tatsächlich
\that, kann diese Prüfung ausnahmsweise nicht in
\t"smtpd_recipient_restrictions" stehen, sondern muss in
\t"smtpd_data_restrictions" geprüft werden.

reject_non_fqdn_client_hostname: Liefert ein REJECT, wenn der
\tReverse-Lookup (PTR) des Client auf einen Rechnernamen verweist,
\tder kein FQDN (Fully Qualified Domain Name) ist.

reject_non_fqdn_helo_hostname: Liefert ein REJECT, wenn der vom
\tClient im HELO/EHLO-Kommando angegebene Rechnername kein FQDN
\t(Fully Qualified Domain Name) ist.

reject_non_fqdn_{recipient,sender}: Blockt die Mail, wenn die
\tMailadresse kein FQDN (Fully Qualified Domain Name) ist. Das ist
\tdann der Fall, wenn sie nur aus einem Hostnamen, nicht aber aus
\teinem Hostnamen und einer Domain besteht. Eine solche Adresse wird
\tzwar maist auch unbekannt sein, wenn sie nicht über einen A-
\toder MX-Record verfügt. Doch ist es sinnvoll stets beide
\tPrüfungen parallel vorzunehmen: Gibt der einliefernde Host eine
\tAdresse mit einem in der eigenen Domain vorhandenen Host
\t(Bsp. www), so besteht die Gefahr das das lokale DNS diesen
\tblanken Hostnamen durch anhängen der eigenen Domain auflöst -
\tuns plötzlich zu einem gültigen A- oder MX-Record kommt.

reject_plaintext_session: Liefert ein REJECT, wenn die Verbindung
\tnicht mit SSL/TLS verschlüsselt ist. Da das erst nach dem HELO
\tKommando der Fall sein kann, sollte dieser Parameter (wenn
\tüberhaupt) nicht in die "smtpd_helo_restrictions" eingesetzt
\twerden.

reject_rbl_client rbl_domain=d.d.d.d: Liefert ein REJECT, wenn die
\tClient IP-Adresse in der genannten "rbl_domain" (Realltime
\tBlackhole List, RBL) geblacklistet ist. Ist zusätzlich auch
\tnoch eine IP-Adresse genannt, wird der Client nur rejected, wenn
\tder Client Eintrag in der RBL auf den A-Record d.d.d.d verweist.
\tsollen (Bsp. relays.ordb.org, list.dsbl.org) 

reject_rhsbl_client rbl_domain=d.d.d.d: Liefert ein REJECT, wenn
\tder Hostname des Clients in der dahinter genannten "rbl_domain"
\t(Right-Hand Sided Blacklisted, RHSBL) gelistet ist. Ist zusätzlich
\tauch noch eine IP-Adresse genannt, wird der Client nur rejected,
\twenn der Client Eintrag in der RBL auf den A-Record d.d.d.d
\tverweist.

reject_rhsbl_helo rbl_domain=d.d.d.d: Liefert ein REJECT, wenn
\tder Hostname im HELO/EHLO-Kommando in der dahinter genannten
\t"rbl_domain" (Right-Hand Sided Blacklisted, RHSBL) gelistet
\tist. Ist zusätzlich auch noch eine IP-Adresse genannt, wird der
\tHELO/EHLO Hostname nur rejected, wenn der Sender Eintrag in der
\tRBL auf den A-Record d.d.d.d verweist.

reject_rhsbl_recipient rbl_domain=d.d.d.d: Liefert ein REJECT, wenn
\tder Hostname des Empfänger in der dahinter genannten "rbl_domain"
\t(Right-Hand Sided Blacklisted, RHSBL) gelistet ist. Ist zusätzlich
\tauch noch eine IP-Adresse genannt, wird der Empfänger nur rejected,
\twenn der Empfänger Eintrag in der RBL auf den A-Record d.d.d.d
\tverweist.

reject_rhsbl_reverse_client rbl_domain=d.d.d.d: Liefert ein REJECT,
\twenn der unbestätigte reverse Hostname des Client in der dahinter
\tgenannten "rbl_domain" (Right-Hand Sided Blacklisted, RHSBL)
\tgelistet ist. Ist zusätzlich auch noch eine IP-Adresse genannt,
\twird der unbestätigte reverse Hostname des Client nur rejected,
\twenn der Eintrag in der RBL auf den A-Record d.d.d.d verweist.

reject_rhsbl_sender rbl_domain=d.d.d.d: Liefert ein REJECT, wenn
\tder Hostname des Sender in der dahinter genannten "rbl_domain"
\t(Right-Hand Sided Blacklisted, RHSBL) gelistet ist. Ist zusätzlich
\tauch noch eine IP-Adresse genannt, wird der Sender nur rejected,
\twenn der Sender Eintrag in der RBL auf den A-Record d.d.d.d
\tverweist.

reject_sender_login_mismatch: Lehnt Mails ab, für deren Sender-
\tMailadresse in "$smtpd_sender_login_maps" zwar ein Besitzer
\thinterlegt wurde, sich der Client jedoch wahlweise nicht mit
\tSMTP-AUTH (SASL) authentifiziert oder sich mit einem nicht für
\tdiesen Sender erlaubten SASL-Account angemeldet hat.

reject_unauth_destination: Liefert ein REJECT, solange nicht
\tdie Zieladresse in "$relay_domins" vorkommt oder Postfix
\tFinal Destination für diese Domain ist, also die Domain in
\t"$mydestination", "$inet_interfaces", "$proxy_interfaces",
\t"$virtual_alias_domains" oder "$virtual_mailbox_domains" vorkommt.

\tTrifft beides nicht zu, liefert die Prüfung REJECT, d.h., die
\tPrüfung wird beendet und die Mail abgelehnt; der Server ist ab
\tdiesen Zeitpunkt relay sicher.
\tBei "permit_auth_destination" würde hingegen weiter geprüft
\twerden, ob noch ein anderer Punkt ein OK liefern würde!

reject_unauth_pipelining: Manche Spam Software sendet SMTP
\tKommandos, ohne die Return Codes des Mailservers abzuwarten.
\tDas soll Zeit sparen. Grundsätzlich ist ein solches Ver-
\thalten legitim, unter dem Namen "Command Pipelining" können
\tsich Server darauf einigen, dass Sie dies zulassen. Postfix
\tbietet hier an, Clients zu blocken die "Command Pipelining"
\tdurchführen, ohne sich vorher vergewissert zu haben, ob
\tPostfix das erlaubt.

reject_unauthenticated_sender_login_mismatch: Anders als bei
\t"reject_sender_login_mismatch" wird die Mail bei den über
"$smtpd_sender_login_maps" geschuetzten Mailadressen nur dann
\tabgelehnt, wenn sich der CLient gar nicht mit SMTP-AUTH
\tauthentifiziert hat. Ist er jedoch authentifiziert, wird die Mail
\tangenommen, ganz gleich ob der SASL-Account passt.

reject_unknown_helo_hostname: Liefert ein REJECT, wenn der für den
\tClient im HELO/EHLO-Kommando angegebene Rechnername im DNS nicht
\tauflösbar ist.

reject_unknown_{recipient,sender}_domain:
\tBlockt die Mail, wenn die Empfänger- bzw.
\tAbsenderadresse im DNS weder über einen A-, noch über einen
\tMX-Record verfügt, d. h., wenn an die angegebene Mailadresse
\tkeine Mail zugestellt werden kann; das macht Sie verdächtig.

reject_unknown_reverse_client_hostname: Liefert ein REJECT, wenn
\tfür die IP-Adresse des Clients im DNS kein Reverse-Lookup, also
\tkein Name zur IP-Nummer gestezt ist (PTR-Record).
\tDies ist eine schwächere Restriction als
\t"reject_unknown_client_hostname".

reject_unlisted_{sender,recipient}: Lehnt Mailadressen ab, die nicht
\tin der Empfänger- oder Absenderliste der jeweiligen Adressklasse
\taufgelistet sind ("local_recipient_maps", "relay_recipient_maps",
\tetc.).

reject_unverified_{sender,recipient}: Lehnt Mails mit Absender-
\toder Empfängeradresse ab, die von Postfix als nicht zustellbar
\tverifiziert werden konnten. Dieser Parameter umfasst lokale
\tMailadressen (macht also "reject_unlisted_recipient" überflessig),
\tenthält aber auch alle externen Mailadressen auf anderen Servern,
\tdenn diese können von Postfix in Echtzeit über SMTP auf einem
\tanderen System verifiziert werden.

sleep: Legt eine Pause ein bevor die nächste Restriction
\tabgearbeitet wird.

NOTIZ: Kann man nur manuell vor eine Restriction stellen.

warn_if_reject: Wuerde die nachfolgende Prüfung ein REJECT liefern,
\tändert dieser Parameter das Verhalten von Postfix. Statt
\tmit einem REJECT aus der Prüfung auszusteigen, wird nur ein
\tLog Eintrag erzeugt und weiter in der Prüfung fortgefahren.
\tDamit lassen sich Konfigurationänderungen leicht testen, ohne
\tden Verlust von Mails riskieren zu müssen.

NOTIZ: Kann man nur manuell vor eine Restriction stellen. Dient
\tzum testen.
')
#}}}
### Modeline {{{
### vim:ft=zsh:foldmethod=marker
### vim:set ts=4:                                                                               
### }}}
